package edu.dio.angular.java.desafios;

import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;

/**
 * <h1>Desafio Dio</h1>
 * <h2>Contador</h2>
 * <p>
 * Este programa tem como objetivo executar um contador que itera de acordo com
 * as entradas do usu√°rio e tratar poss√≠veis exce√ß√µes para indicar o que √©
 * esperado pelo algoritmo.
 *
 * @author Roberto N√≥brega Jr.
 * @Mentor Gleysson Sampaio
 * @version 1.1
 * @since 17/10/2023
 * @GitHub devrenj
 */

public class DesafioContador {
    private static Scanner scanner = new Scanner(System.in);

  public static void main(String[] args) {
    // Scanner terminal = new Scanner(System.in);
    int primeiraEntrada = 0;
    int segundaEntrada = 0;

    // RECOMENDA√á√ÉO: colocar uma explica√ß√£o antes de fazer o pedido dos n√∫meros, tipo um enunciado de exerc√≠cio, saca?

    // Recebendo as entradas do usu√°rio
    primeiraEntrada = lerInteiro("Digite o menor n√∫mero:");

    segundaEntrada = lerInteiro("Digite o maior n√∫mero:");


    // SUGEST√ÉO: talvez seja melhor tirar esse contat de dentro desse try e fazer essa verifica√ß√£o direto na fun√ß√£o (diminuindo assim a quantidade de verifica√ß√µes e an√°lises no "main")

    // SUGEST√ÉO: talvez seja interessante voc√™ colocar um loop para o programa s√≥ encerrar quando a contagem for feita ü§î

    // Executando a fun√ß√£o contar()
    try {
      contar(primeiraEntrada, segundaEntrada);

      // Tratamento de exce√ß√£o em caso do usu√°rio digitar par√¢metros inv√°lidos,
      // sejam eles negativos ou o primeiro par√¢metro menor que o segundo par√¢metro
    } catch (ParametrosInvalidosException e) {
      System.err.println("A contagem deve ser positiva! Digite o primeiro n√∫mero menor que o segundo n√∫mero.");
    }

    // Fechando o Scanner()
    // terminal.close();

    // // Testes
    // System.out.println(primeiraEntrada);
    // System.out.println(segundaEntrada);

  }

  /**
   * Esta √© uma simples fun√ß√£o que recebem dois n√∫meros e posteriormente executam
   * um la√ßo de repeti√ß√£o (for) que come√ßa com o primeiro par√¢metro e itera do
   * menor para o maior, at√© que atinja o limite do segundo par√¢metro
   *
   * @param num1 Recebe o primeiro n√∫mero digitado pelo usu√°rio armazenado na
   *             vari√°vel primeiraEntrada
   * @param num2 Recebe o segundo n√∫mero digitado pelo usu√°rio armazenado na
   *             vari√°vel segundaEntrada
   * @throws ParametrosInvalidosException Trata a condi√ß√£o de que o primeiro
   *                                      n√∫mero deve ser menor que o segundo e
   *                                      tamb√©m n√£o receber um resultado negativo
   */
  static void contar(int num1, int num2) throws ParametrosInvalidosException {
    if (num1 < num2) {
      System.out.println("Contando:");
      for (int i = num1; i <= num2; i++) {
        System.out.println(i + "..");
      }
      // Tratamento de exce√ß√£o caso o primeiro par√¢metro seja maior que o segundo
      // par√¢metro
    } else if (num1 > num2) {
      throw new ParametrosInvalidosException();
      // Tratamento de exce√ß√£o para n√∫meros negativos
    } else if (num1 < 0) {
      throw new ParametrosInvalidosException();
    }
    System.out.println("Contagem finalizada!");
  }

  static int lerInteiro(String text) {
    boolean entradaValida = false;
    int entrada = 0;

    while (!entradaValida) {
      try {
        System.out.println(text);
        entrada = scanner.nextInt(); // Tenta ler um n√∫mero inteiro

        // Se chegou at√© aqui, a entrada √© v√°lida
        entradaValida = true;
      } catch (InputMismatchException e) {
        // Se uma exce√ß√£o InputMismatchException for lan√ßada, a entrada n√£o √© um n√∫mero
        // inteiro

        // Tratamento de exce√ß√£o em caso do usu√°rio digitar algo diferente de um
        // n√∫mero

        System.out.println("Digite apenas n√∫meros!");
        scanner.next(); // Limpa o buffer de entrada
      } catch (NoSuchElementException e) {
        System.out.println(e);
        scanner.next(); // Limpa o buffer de entrada
      }
    }

    return entrada;
  }

}